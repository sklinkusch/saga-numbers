{"version":3,"sources":["actions/actionTypes.js","sagas/index.js","reducers/index.js","store/index.js","components/App.js","serviceWorker.js","index.js"],"names":["API_CALL_REQUEST","API_CALL_SUCCESS","API_CALL_FAILURE","watcherSaga","workerSaga","regenerator_default","a","wrap","_context","prev","next","takeLatest","stop","_marked","action","number","response","message","_context2","test","Error","Number","isInteger","call","fetchNumber","sent","data","includes","put","type","t0","error","_marked2","axios","get","concat","initialState","fetching","sagaMiddleware","createSagaMiddleware","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","composed","compose","applyMiddleware","store","createStore","state","arguments","length","undefined","Object","objectSpread","run","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","inputField","React","createRef","_this2","_this$props","getData","react_default","createElement","className","id","min","ref","disabled","onClick","current","value","Component","connect","dispatch","Boolean","location","hostname","match","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b67ec88.chunk.js","sourcesContent":["export const API_CALL_REQUEST = \"API_CALL_REQUEST\";\nexport const API_CALL_SUCCESS = \"API_CALL_SUCCESS\";\nexport const API_CALL_FAILURE = \"API_CALL_FAILURE\";\n","// import saga\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport {\n  API_CALL_REQUEST,\n  API_CALL_SUCCESS,\n  API_CALL_FAILURE\n} from \"../actions/actionTypes\";\n\nexport function* watcherSaga() {\n  yield takeLatest(API_CALL_REQUEST, workerSaga);\n}\n\nfunction* workerSaga(action) {\n  try {\n    const number = action.number;\n    if (!/^[+-]?[0-9]+[.]?[0-9]*$/.test(number)) {\n      throw new Error(\"You have to provide a number!\");\n    }\n    if (!Number.isInteger(Number(number))) {\n      throw new Error(\"The number must be a whole number.\");\n    }\n    if (Number(number) < 0) {\n      throw new Error(\"The number must be positive.\");\n    }\n    const response = yield call(() => fetchNumber(number));\n    const message = response.data;\n    if (message.includes(\"Bad Gateway\")) {\n      throw new Error(\"Bad response from the server. Try again.\");\n    }\n    yield put({ type: API_CALL_SUCCESS, message });\n  } catch (error) {\n    yield put({ type: API_CALL_FAILURE, error });\n  }\n}\n\nconst fetchNumber = number => {\n  return axios.get(\n    `https://numbers-api-proxy.dci-fbw121.now.sh/?number=${number}`\n  );\n};\n","import {\n  API_CALL_REQUEST,\n  API_CALL_SUCCESS,\n  API_CALL_FAILURE\n} from \"../actions/actionTypes\";\n\nconst initialState = {\n  fetching: false,\n  message: null,\n  error: null\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case API_CALL_REQUEST:\n      return { ...state, fetching: true, message: null, error: null };\n    case API_CALL_SUCCESS:\n      return { ...state, fetching: false, message: action.message };\n    case API_CALL_FAILURE:\n      return { ...state, fetching: false, error: action.error };\n    default:\n      return state;\n  }\n};\n","// import redux store methods\nimport { createStore, applyMiddleware, compose } from \"redux\";\n// import saga middleware\nimport createSagaMiddleware from \"redux-saga\";\n// import watcher\nimport { watcherSaga } from \"../sagas\";\n// import reducer\nimport { reducer } from \"../reducers\";\n\n// create Saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// devtools\nconst reduxDevTools =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\n// compose Saga and devtools\nconst composed = compose(\n  applyMiddleware(sagaMiddleware),\n  reduxDevTools\n);\n\n// create redux Store\nexport const store = createStore(reducer, composed);\n\n// run the watcher\nsagaMiddleware.run(watcherSaga);\n","import React from \"react\";\nimport \"../styles/App.scss\";\nimport { API_CALL_REQUEST } from \"../actions/actionTypes\";\nimport { connect } from \"react-redux\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputField = React.createRef();\n  }\n  render() {\n    const { message, fetching, error, getData } = this.props;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"header pi\">\n            <section className=\"number\" id=\"no-a\">\n              13\n            </section>\n            <section className=\"number\" id=\"no-b\">\n              147\n            </section>\n            <section className=\"number\" id=\"no-c\">\n              42\n            </section>\n            <section className=\"number\" id=\"no-d\">\n              27\n            </section>\n          </div>\n          <div className=\"subheader\">Numbers</div>\n          <div className=\"flex-container flex-row\">\n            {message && (\n              <aside className=\"left quotation quotation-left sm-1 lg-1 as-begin\">\n                <i className=\"fas fa-quote-left\" />\n              </aside>\n            )}\n            {message && <main className=\"message sm-10 lg-10\">{message}</main>}\n            {fetching && (\n              <main className=\"fetching sm-10 lg-10 alert-warning\">\n                Fetching a quotation from the Numbers API\n              </main>\n            )}\n            {error && (\n              <main className=\"error sm-10 lg-10 alert-danger\">\n                {error.message}\n              </main>\n            )}\n            {!message && !error && !fetching && (\n              <main className=\"alert-secondary sm-10 lg-10\">\n                Enter a number to get a quote\n              </main>\n            )}\n            {message && (\n              <aside className=\"right quotation quotation-right sm-1 lg-1 as-end\">\n                <i className=\"fas fa-quote-right\" />\n              </aside>\n            )}\n          </div>\n          <div className=\"input-form\">\n            <div>\n              <input type=\"number\" min=\"0\" ref={this.inputField} />\n            </div>\n            <div>\n              {fetching ? (\n                <button className=\"btn btn-warning\" disabled>\n                  Fetching...\n                </button>\n              ) : (\n                <button\n                  className=\"btn btn-primary\"\n                  onClick={() => getData(this.inputField.current.value)}\n                >\n                  Show info about this number\n                </button>\n              )}\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    fetching: state.fetching,\n    message: state.message,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getData: number => dispatch({ type: API_CALL_REQUEST, number })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import React\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import React bindings\nimport { Provider } from \"react-redux\";\n// import store\nimport { store } from \"./store\";\n// import App\nimport App from \"./components/App\";\n// import styles\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/index.scss\";\n// import serviceWorker\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}